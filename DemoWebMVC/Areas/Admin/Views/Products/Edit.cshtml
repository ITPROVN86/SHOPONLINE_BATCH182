@model ShopBusiness.Models.Product

@{
    ViewData["Title"] = "Cập nhật Sản phẩm";
}

<h4>
    Cập nhật Sản phẩm
</h4>
<div class="row mt-5">
    <div class="col-md-12">
        @{
            if (TempData["AlertMessage"] != null)
            {
                <p id="alertBox" class="alert @TempData["Type"]">
                    @TempData["AlertMessage"]
                </p>
            }
        }
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ProductId" />
            <div class="mb-3">
                <label asp-for="ProductName" class="control-label"></label>
                <input asp-for="ProductName" class="form-control" />
                <span asp-validation-for="ProductName" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" ></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Ncontent" class="control-label"></label>
                <input type="hidden" asp-for="Ncontent" id="hiddenNcontent">
                <div id="editor"></div>
               @*  <textarea asp-for="Ncontent" class="form-control" ></textarea>
                <span asp-validation-for="Ncontent" class="text-danger"></span> *@
            </div>
            <div class="mb-3">
                <label asp-for="CategoryId" class="control-label"></label>
                <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="ImageFile" class="control-label"></label>
                <input asp-for="ImageFile" class="form-control" type="file" />
                <span asp-validation-for="ImageFile" class="text-danger"></span>
                <img id="preview" src="@Url.Content(Model.ImageUrl==null?"~/Admin/img/avatars/1.png":"~/Upload/images/"+Model.ImageUrl)" class="rounded-circle" height="40" width="40" />
            </div>
            <div class="mb-3">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="CreatePost" class="control-label"></label>
                <input asp-for="CreatePost" class="form-control" />
                <span asp-validation-for="CreatePost" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="UserPost" class="control-label"></label>
                <select asp-for="UserPost" class="form-control" asp-items="ViewBag.UserPost"></select>
                <span asp-validation-for="UserPost" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Status" /> @Html.DisplayNameFor(model => model.Status)
                </label>
            </div>
            <div class="mb-3">
                <a asp-action="Index" class="btn btn-primary">Trở về</a>
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        DateTime currentDate = DateTime.Now;
    }
    <script src="
https://cdn.jsdelivr.net/npm/ckeditor5-classic-free-full-feature@35.4.1/build/ckeditor.min.js
        "></script>
    <script src="~/admin/controllers/ProductsController.js?@currentDate"></script>
    <script>
        ImageFile.onchange = evt => {
            const [file] = ImageFile.files
            if (file) {
                preview.src = URL.createObjectURL(file);
            }
        }
        ClassicEditor
            .create(document.querySelector('#editor'), {
                extraPlugins: [CustomUploadAdapterPlugin],

                toolbar: ['Essentials',
                    'Paragraph',
                    'Heading', '|',
                    'Bold',
                    'Italic',
                    'Underline',
                    'Strikethrough', '|',
                    'SourceEditing',
                    'Subscript',
                    'Superscript',
                    'Alignment',
                    'Indent',
                    'IndentBlock',
                    'BlockQuote', '|',
                    'Link',
                    'Image',
                    'ImageCaption',
                    'ImageStyle',
                    'ImageToolbar',
                    'ImageUpload',
                    'List',
                    'MediaEmbed', '|',
                    'PasteFromOffice',
                    'insertTable',
                    'Highlight',
                    'FontFamily',
                    'FontSize',
                    'FontColor',
                    'FontBackgroundColor', 'GeneralHtmlSupport', /* ... */]
                ,
                image: {
                    // Cấu hình các kiểu hình ảnh
                    styles: [
                        'full',
                        'side'
                    ],
                    toolbar: [
                        'imageStyle:full',
                        'imageStyle:side',
                        '|',
                        'imageTextAlternative'
                    ]
                },
                // Cấu hình để tải hình ảnh lên server của bạn
                imageUpload: {
                    uploadUrl: '/api/image/upload',
                    headers: {
                        'X-CSRF-TOKEN': 'CSRF-Token', // If CSRF token is needed
                    }
                }
            })
            .then(editor => {
                const initialData = document.querySelector('#hiddenNcontent').value;
                editor.setData(initialData);
                editor.model.document.on('change:data', () => {
                    document.querySelector('#hiddenNcontent').value = editor.getData();
                });
            })
            .catch(error => {
                console.error(error);
            });


        function CustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                return new CustomUploadAdapter(loader);
            };
        }
        class CustomUploadAdapter {
            constructor(loader) {
                this.loader = loader;
            }

            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        const data = new FormData();
                        data.append('upload', file);

                        fetch('/Admin/Products/UploadImage', {
                            method: 'POST',
                            body: data,
                        })
                            .then(response => response.json())
                            .then(result => {
                                if (result.uploaded) {
                                    resolve({
                                        default: result.url // Adjust depending on the API response
                                    });
                                } else {
                                    reject(result.error.message);
                                }
                            })
                            .catch(error => {
                                reject('Upload failed');
                            });
                    }));
            }

            abort() {
                // Handle aborting the upload process
            }
        }
    </script>
}
